# RUPET Pipeline
# The TIA - Team!

steps:

##- task: Xther-Deployment@0  
##  inputs:
##    installDir: '$(Build.SourcesDirectory)/xther/'
##    resources: 'CHR'
##  displayName: 'XTHER install'

##- task: PowerShell@2
##  inputs:    
##    targetType: 'inline'
##    script: |
##      $cliEnv = 'mac'
##      if ('$(Agent.OS)' -eq 'Windows_NT')
##      {
##        $cliEnv = 'win'
##      }
##      if ('$(Agent.OS)' -eq 'Linux')
##      {
##        $cliEnv = 'linux'
##      }
##      $destinationFolder = "$(Build.SourcesDirectory)/aimaps/aimaps_cli/$($cliEnv)/Selenium/"
##      if (!(Test-Path -path $destinationFolder)) {New-Item $destinationFolder -Type Directory}
##      Copy-Item '$(Build.SourcesDirectory)/xther/*' $destinationFolder -Force -Recurse
##  displayName: 'Install drivers'

- task: PowerShell@2
  condition: eq(variables['Agent.OS'], 'Darwin')
  inputs:    
    targetType: 'inline'
    script: |
      chmod 777 '$(Build.SourcesDirectory)/aimaps/aimaps_cli/mac/Selenium/chromedriver'
      dotnet aimaps/aimaps_cli/mac/Gsqa.Tools.AiMaps.Console.dll src='maps/products_store/products-store.aiml'
  displayName: 'Running robots - MAC'

- task: PowerShell@2
  condition: eq(variables['Agent.OS'], 'Linux')
  inputs:
    pwsh: true  
    targetType: 'inline'
    script: |
      chmod 777 '$(Build.SourcesDirectory)/aimaps/aimaps_cli/linux/Selenium/chromedriver'
      chmod 777 aimaps/aimaps_cli/linux/Gsqa.Tools.AiMaps.Console.dll
      $threadsList = New-Object System.Collections.Generic.List[int]      
      for ($i = 1; $i -le $(threads); $i++)
      {
      $threadsList.add($i)
      $threadsList | ForEach-Object -Parallel {dotnet aimaps/aimaps_cli/linux/Gsqa.Tools.AiMaps.Console.dll src='$(Build.SourcesDirectory)/maps/GreenHeart-AKS.aiml' --VarMonitoring.ThreadNum=$_ --VarMonitoring.IterationId=$(IterationId) --VarFuncional.fecha=$(FuncFecha) --VarFuncional.cliente=$(FuncCliente) --VarFuncional.Proyecto=$(FuncProyecto) --VarRUPET.fecha=$(RUPETFecha) --VarRUPET.cliente=$(RUPETCliente) --VarRUPET.Proyecto=$(RUPETProyecto) --VarJMeter.fecha=$(JMeterFecha) --VarJMeter.cliente=$(JMeterCliente) --VarJMeter.Proyecto=$(JMeterProyecto)} -ThrottleLimit $(threads)
      }      
      for ($i = $(threads); $i -ge 1; $i--)
      {
      $threadsList | ForEach-Object -Parallel {dotnet aimaps/aimaps_cli/linux/Gsqa.Tools.AiMaps.Console.dll src='$(Build.SourcesDirectory)/maps/GreenHeart-AKS.aiml' --VarMonitoring.ThreadNum=$_ --VarMonitoring.IterationId=$(IterationId) --VarFuncional.fecha=$(FuncFecha) --VarFuncional.cliente=$(FuncCliente) --VarFuncional.Proyecto=$(FuncProyecto) --VarRUPET.fecha=$(RUPETFecha) --VarRUPET.cliente=$(RUPETCliente) --VarRUPET.Proyecto=$(RUPETProyecto) --VarJMeter.fecha=$(JMeterFecha) --VarJMeter.cliente=$(JMeterCliente) --VarJMeter.Proyecto=$(JMeterProyecto)} -ThrottleLimit $(threads)
      $threadsList.remove($i)
      }
  displayName: 'Running robots - Linux'

- task: PowerShell@2  
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:    
    pwsh: true 
    targetType: 'inline'
    script: |
      cd aimaps/aimaps_designer/    
      $threadsList = New-Object System.Collections.Generic.List[int]      
      for ($i = 1; $i -le $(threads); $i++)
      {
      $threadsList.add($i)
      $threadsList | ForEach-Object -Parallel {./AiMap.Console.exe src='$(Build.SourcesDirectory)\maps\GreenHeart-AKS.aiml' --VarMonitoring.ThreadNum=$_ --VarMonitoring.IterationId='$(IterationId)' --VarFuncional.fecha='$(FuncFecha)' --VarFuncional.cliente='$(FuncCliente)' --VarFuncional.Proyecto='$(FuncProyecto)' --VarRUPET.fecha='$(RUPETFecha)' --VarRUPET.cliente='$(RUPETCliente)' --VarRUPET.Proyecto='$(RUPETProyecto)' --VarJMeter.fecha='$(JMeterFecha)' --VarJMeter.cliente='$(JMeterCliente)' --VarJMeter.Proyecto='$(JMeterProyecto)'} -ThrottleLimit $(threads)
      }      
      for ($i = $(threads); $i -ge 1; $i--)
      {
      $threadsList | ForEach-Object -Parallel {./AiMap.Console.exe src='$(Build.SourcesDirectory)\maps\GreenHeart-AKS.aiml' --VarMonitoring.ThreadNum=$_ --VarMonitoring.IterationId='$(IterationId)' --VarFuncional.fecha='$(FuncFecha)' --VarFuncional.cliente='$(FuncCliente)' --VarFuncional.Proyecto='$(FuncProyecto)' --VarRUPET.fecha='$(RUPETFecha)' --VarRUPET.cliente='$(RUPETCliente)' --VarRUPET.Proyecto='$(RUPETProyecto)' --VarJMeter.fecha='$(JMeterFecha)' --VarJMeter.cliente='$(JMeterCliente)' --VarJMeter.Proyecto='$(JMeterProyecto)'} -ThrottleLimit $(threads)
      $threadsList.remove($i)
      }
  displayName: 'Running robots - WIN'
